<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>code on Marcos Ramos</title><link>https://marcosramos.dev/tags/code/</link><description>Recent content in code on Marcos Ramos</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 22 Jul 2022 20:00:00 -0300</lastBuildDate><atom:link href="https://marcosramos.dev/tags/code/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing Predictable Elixir Code with Reducers - Part 2</title><link>https://marcosramos.dev/blog/2022/07/writing-predictable-elixir-code-with-reducers-part-2/</link><pubDate>Fri, 22 Jul 2022 20:00:00 -0300</pubDate><guid>https://marcosramos.dev/blog/2022/07/writing-predictable-elixir-code-with-reducers-part-2/</guid><description>Using Reducers and Macros to Write Predictable Code. Published on AppSignal Blog.</description><content:encoded><![CDATA[<p>This is the second and final part of the series about code predictability on Elixir. In this part I show how one can use
reducers and macros to create a small framework to enforce code style in your project. When I finished writing this
post, I also ended up creating <a href="https://github.com/msramos/ex_pipeline">ex_pipeline</a>, an open source library that allows
developers to create pipelines while enforcing code style easily.</p>
<p>Link: <a href="https://blog.appsignal.com/2022/08/23/predictable-code-in-elixir-expressions-as-reducers-and-macros.html"><em>Predictable Code in Elixir: Expressions as Reducers and Macros</em></a></p>
<p>Published on AppSignal Blog.</p>
]]></content:encoded></item><item><title>Writing Predictable Elixir Code with Reducers - Part 1</title><link>https://marcosramos.dev/blog/2022/07/writing-predictable-elixir-code-with-reducers-part-1/</link><pubDate>Tue, 19 Jul 2022 20:00:00 -0300</pubDate><guid>https://marcosramos.dev/blog/2022/07/writing-predictable-elixir-code-with-reducers-part-1/</guid><description>How to use Elixir built-in feature to create beautiful code. Published on AppSignal Blog.</description><content:encoded><![CDATA[<p>This is the first part of a series about code predictability on Elixir. It&rsquo;s
a gentle introduction on how anyone can use existing Elixir features to write
beautiful code and and gives the reader a gentle introduction into the realm of
reducers.</p>
<p><a href="https://blog.appsignal.com/2022/07/19/writing-predictable-elixir-code-with-reducers.html">Link: Writing Predictable Elixir Code with Reducers</a></p>
<p>Published on AppSignal Blog.</p>
]]></content:encoded></item></channel></rss>